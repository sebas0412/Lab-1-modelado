
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOUND COEFF EMPTY_COEFF FRACTION_COEFF GARBAGE NORMAL_COEFF RESTRICTION STARTING_COEFF STARTING_COEFF_EMPTY STARTING_VARIABLE VARIABLEequation :   expression BOUND RESTRICTION\n                |   expressionexpression :     expression factor\n                  |     factorfactor   :   startingcoeff VARIABLE\n                |   startingcoeffempty VARIABLE\n                |   normalcoeff VARIABLE\n                |   emptycoeff VARIABLE\n                |   fractioncoeff VARIABLE\n                |   STARTING_VARIABLEstartingcoeff    :   STARTING_COEFFstartingcoeffempty   :   STARTING_COEFF_EMPTYnormalcoeff  :   NORMAL_COEFFemptycoeff   :   EMPTY_COEFFfractioncoeff    :   FRACTION_COEFF'
    
_lr_action_items = {'STARTING_VARIABLE':([0,2,3,9,16,17,18,19,20,21,],[9,9,-4,-10,-3,-5,-6,-7,-8,-9,]),'STARTING_COEFF':([0,2,3,9,16,17,18,19,20,21,],[10,10,-4,-10,-3,-5,-6,-7,-8,-9,]),'STARTING_COEFF_EMPTY':([0,2,3,9,16,17,18,19,20,21,],[11,11,-4,-10,-3,-5,-6,-7,-8,-9,]),'NORMAL_COEFF':([0,2,3,9,16,17,18,19,20,21,],[12,12,-4,-10,-3,-5,-6,-7,-8,-9,]),'EMPTY_COEFF':([0,2,3,9,16,17,18,19,20,21,],[13,13,-4,-10,-3,-5,-6,-7,-8,-9,]),'FRACTION_COEFF':([0,2,3,9,16,17,18,19,20,21,],[14,14,-4,-10,-3,-5,-6,-7,-8,-9,]),'$end':([1,2,3,9,16,17,18,19,20,21,22,],[0,-2,-4,-10,-3,-5,-6,-7,-8,-9,-1,]),'BOUND':([2,3,9,16,17,18,19,20,21,],[15,-4,-10,-3,-5,-6,-7,-8,-9,]),'VARIABLE':([4,5,6,7,8,10,11,12,13,14,],[17,18,19,20,21,-11,-12,-13,-14,-15,]),'RESTRICTION':([15,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'equation':([0,],[1,]),'expression':([0,],[2,]),'factor':([0,2,],[3,16,]),'startingcoeff':([0,2,],[4,4,]),'startingcoeffempty':([0,2,],[5,5,]),'normalcoeff':([0,2,],[6,6,]),'emptycoeff':([0,2,],[7,7,]),'fractioncoeff':([0,2,],[8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> equation","S'",1,None,None,None),
  ('equation -> expression BOUND RESTRICTION','equation',3,'p_equation','Lexer.py',52),
  ('equation -> expression','equation',1,'p_equation','Lexer.py',53),
  ('expression -> expression factor','expression',2,'p_expression','Lexer.py',61),
  ('expression -> factor','expression',1,'p_expression','Lexer.py',62),
  ('factor -> startingcoeff VARIABLE','factor',2,'p_factor','Lexer.py',65),
  ('factor -> startingcoeffempty VARIABLE','factor',2,'p_factor','Lexer.py',66),
  ('factor -> normalcoeff VARIABLE','factor',2,'p_factor','Lexer.py',67),
  ('factor -> emptycoeff VARIABLE','factor',2,'p_factor','Lexer.py',68),
  ('factor -> fractioncoeff VARIABLE','factor',2,'p_factor','Lexer.py',69),
  ('factor -> STARTING_VARIABLE','factor',1,'p_factor','Lexer.py',70),
  ('startingcoeff -> STARTING_COEFF','startingcoeff',1,'p_startingcoeff','Lexer.py',96),
  ('startingcoeffempty -> STARTING_COEFF_EMPTY','startingcoeffempty',1,'p_startingcoeffempty','Lexer.py',99),
  ('normalcoeff -> NORMAL_COEFF','normalcoeff',1,'p_normalcoeff','Lexer.py',102),
  ('emptycoeff -> EMPTY_COEFF','emptycoeff',1,'p_emptycoeff','Lexer.py',105),
  ('fractioncoeff -> FRACTION_COEFF','fractioncoeff',1,'p_fractioncoeff','Lexer.py',108),
]
