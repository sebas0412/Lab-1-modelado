Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COEFF
    GARBAGE

Grammar

Rule 0     S' -> equation
Rule 1     equation -> expression BOUND RESTRICTION
Rule 2     equation -> expression
Rule 3     expression -> expression factor
Rule 4     expression -> factor
Rule 5     factor -> startingcoeff VARIABLE
Rule 6     factor -> startingcoeffempty VARIABLE
Rule 7     factor -> normalcoeff VARIABLE
Rule 8     factor -> emptycoeff VARIABLE
Rule 9     factor -> fractioncoeff VARIABLE
Rule 10    factor -> STARTING_VARIABLE
Rule 11    startingcoeff -> STARTING_COEFF
Rule 12    startingcoeffempty -> STARTING_COEFF_EMPTY
Rule 13    normalcoeff -> NORMAL_COEFF
Rule 14    emptycoeff -> EMPTY_COEFF
Rule 15    fractioncoeff -> FRACTION_COEFF

Terminals, with rules where they appear

BOUND                : 1
COEFF                : 
EMPTY_COEFF          : 14
FRACTION_COEFF       : 15
GARBAGE              : 
NORMAL_COEFF         : 13
RESTRICTION          : 1
STARTING_COEFF       : 11
STARTING_COEFF_EMPTY : 12
STARTING_VARIABLE    : 10
VARIABLE             : 5 6 7 8 9
error                : 

Nonterminals, with rules where they appear

emptycoeff           : 8
equation             : 0
expression           : 1 2 3
factor               : 3 4
fractioncoeff        : 9
normalcoeff          : 7
startingcoeff        : 5
startingcoeffempty   : 6

Parsing method: LALR

state 0

    (0) S' -> . equation
    (1) equation -> . expression BOUND RESTRICTION
    (2) equation -> . expression
    (3) expression -> . expression factor
    (4) expression -> . factor
    (5) factor -> . startingcoeff VARIABLE
    (6) factor -> . startingcoeffempty VARIABLE
    (7) factor -> . normalcoeff VARIABLE
    (8) factor -> . emptycoeff VARIABLE
    (9) factor -> . fractioncoeff VARIABLE
    (10) factor -> . STARTING_VARIABLE
    (11) startingcoeff -> . STARTING_COEFF
    (12) startingcoeffempty -> . STARTING_COEFF_EMPTY
    (13) normalcoeff -> . NORMAL_COEFF
    (14) emptycoeff -> . EMPTY_COEFF
    (15) fractioncoeff -> . FRACTION_COEFF

    STARTING_VARIABLE shift and go to state 9
    STARTING_COEFF  shift and go to state 10
    STARTING_COEFF_EMPTY shift and go to state 11
    NORMAL_COEFF    shift and go to state 12
    EMPTY_COEFF     shift and go to state 13
    FRACTION_COEFF  shift and go to state 14

    equation                       shift and go to state 1
    expression                     shift and go to state 2
    factor                         shift and go to state 3
    startingcoeff                  shift and go to state 4
    startingcoeffempty             shift and go to state 5
    normalcoeff                    shift and go to state 6
    emptycoeff                     shift and go to state 7
    fractioncoeff                  shift and go to state 8

state 1

    (0) S' -> equation .



state 2

    (1) equation -> expression . BOUND RESTRICTION
    (2) equation -> expression .
    (3) expression -> expression . factor
    (5) factor -> . startingcoeff VARIABLE
    (6) factor -> . startingcoeffempty VARIABLE
    (7) factor -> . normalcoeff VARIABLE
    (8) factor -> . emptycoeff VARIABLE
    (9) factor -> . fractioncoeff VARIABLE
    (10) factor -> . STARTING_VARIABLE
    (11) startingcoeff -> . STARTING_COEFF
    (12) startingcoeffempty -> . STARTING_COEFF_EMPTY
    (13) normalcoeff -> . NORMAL_COEFF
    (14) emptycoeff -> . EMPTY_COEFF
    (15) fractioncoeff -> . FRACTION_COEFF

    BOUND           shift and go to state 15
    $end            reduce using rule 2 (equation -> expression .)
    STARTING_VARIABLE shift and go to state 9
    STARTING_COEFF  shift and go to state 10
    STARTING_COEFF_EMPTY shift and go to state 11
    NORMAL_COEFF    shift and go to state 12
    EMPTY_COEFF     shift and go to state 13
    FRACTION_COEFF  shift and go to state 14

    factor                         shift and go to state 16
    startingcoeff                  shift and go to state 4
    startingcoeffempty             shift and go to state 5
    normalcoeff                    shift and go to state 6
    emptycoeff                     shift and go to state 7
    fractioncoeff                  shift and go to state 8

state 3

    (4) expression -> factor .

    BOUND           reduce using rule 4 (expression -> factor .)
    STARTING_VARIABLE reduce using rule 4 (expression -> factor .)
    STARTING_COEFF  reduce using rule 4 (expression -> factor .)
    STARTING_COEFF_EMPTY reduce using rule 4 (expression -> factor .)
    NORMAL_COEFF    reduce using rule 4 (expression -> factor .)
    EMPTY_COEFF     reduce using rule 4 (expression -> factor .)
    FRACTION_COEFF  reduce using rule 4 (expression -> factor .)
    $end            reduce using rule 4 (expression -> factor .)


state 4

    (5) factor -> startingcoeff . VARIABLE

    VARIABLE        shift and go to state 17


state 5

    (6) factor -> startingcoeffempty . VARIABLE

    VARIABLE        shift and go to state 18


state 6

    (7) factor -> normalcoeff . VARIABLE

    VARIABLE        shift and go to state 19


state 7

    (8) factor -> emptycoeff . VARIABLE

    VARIABLE        shift and go to state 20


state 8

    (9) factor -> fractioncoeff . VARIABLE

    VARIABLE        shift and go to state 21


state 9

    (10) factor -> STARTING_VARIABLE .

    BOUND           reduce using rule 10 (factor -> STARTING_VARIABLE .)
    STARTING_VARIABLE reduce using rule 10 (factor -> STARTING_VARIABLE .)
    STARTING_COEFF  reduce using rule 10 (factor -> STARTING_VARIABLE .)
    STARTING_COEFF_EMPTY reduce using rule 10 (factor -> STARTING_VARIABLE .)
    NORMAL_COEFF    reduce using rule 10 (factor -> STARTING_VARIABLE .)
    EMPTY_COEFF     reduce using rule 10 (factor -> STARTING_VARIABLE .)
    FRACTION_COEFF  reduce using rule 10 (factor -> STARTING_VARIABLE .)
    $end            reduce using rule 10 (factor -> STARTING_VARIABLE .)


state 10

    (11) startingcoeff -> STARTING_COEFF .

    VARIABLE        reduce using rule 11 (startingcoeff -> STARTING_COEFF .)


state 11

    (12) startingcoeffempty -> STARTING_COEFF_EMPTY .

    VARIABLE        reduce using rule 12 (startingcoeffempty -> STARTING_COEFF_EMPTY .)


state 12

    (13) normalcoeff -> NORMAL_COEFF .

    VARIABLE        reduce using rule 13 (normalcoeff -> NORMAL_COEFF .)


state 13

    (14) emptycoeff -> EMPTY_COEFF .

    VARIABLE        reduce using rule 14 (emptycoeff -> EMPTY_COEFF .)


state 14

    (15) fractioncoeff -> FRACTION_COEFF .

    VARIABLE        reduce using rule 15 (fractioncoeff -> FRACTION_COEFF .)


state 15

    (1) equation -> expression BOUND . RESTRICTION

    RESTRICTION     shift and go to state 22


state 16

    (3) expression -> expression factor .

    BOUND           reduce using rule 3 (expression -> expression factor .)
    STARTING_VARIABLE reduce using rule 3 (expression -> expression factor .)
    STARTING_COEFF  reduce using rule 3 (expression -> expression factor .)
    STARTING_COEFF_EMPTY reduce using rule 3 (expression -> expression factor .)
    NORMAL_COEFF    reduce using rule 3 (expression -> expression factor .)
    EMPTY_COEFF     reduce using rule 3 (expression -> expression factor .)
    FRACTION_COEFF  reduce using rule 3 (expression -> expression factor .)
    $end            reduce using rule 3 (expression -> expression factor .)


state 17

    (5) factor -> startingcoeff VARIABLE .

    BOUND           reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    STARTING_VARIABLE reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    STARTING_COEFF  reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    STARTING_COEFF_EMPTY reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    NORMAL_COEFF    reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    EMPTY_COEFF     reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    FRACTION_COEFF  reduce using rule 5 (factor -> startingcoeff VARIABLE .)
    $end            reduce using rule 5 (factor -> startingcoeff VARIABLE .)


state 18

    (6) factor -> startingcoeffempty VARIABLE .

    BOUND           reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    STARTING_VARIABLE reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    STARTING_COEFF  reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    STARTING_COEFF_EMPTY reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    NORMAL_COEFF    reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    EMPTY_COEFF     reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    FRACTION_COEFF  reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)
    $end            reduce using rule 6 (factor -> startingcoeffempty VARIABLE .)


state 19

    (7) factor -> normalcoeff VARIABLE .

    BOUND           reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    STARTING_VARIABLE reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    STARTING_COEFF  reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    STARTING_COEFF_EMPTY reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    NORMAL_COEFF    reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    EMPTY_COEFF     reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    FRACTION_COEFF  reduce using rule 7 (factor -> normalcoeff VARIABLE .)
    $end            reduce using rule 7 (factor -> normalcoeff VARIABLE .)


state 20

    (8) factor -> emptycoeff VARIABLE .

    BOUND           reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    STARTING_VARIABLE reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    STARTING_COEFF  reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    STARTING_COEFF_EMPTY reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    NORMAL_COEFF    reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    EMPTY_COEFF     reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    FRACTION_COEFF  reduce using rule 8 (factor -> emptycoeff VARIABLE .)
    $end            reduce using rule 8 (factor -> emptycoeff VARIABLE .)


state 21

    (9) factor -> fractioncoeff VARIABLE .

    BOUND           reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    STARTING_VARIABLE reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    STARTING_COEFF  reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    STARTING_COEFF_EMPTY reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    NORMAL_COEFF    reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    EMPTY_COEFF     reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    FRACTION_COEFF  reduce using rule 9 (factor -> fractioncoeff VARIABLE .)
    $end            reduce using rule 9 (factor -> fractioncoeff VARIABLE .)


state 22

    (1) equation -> expression BOUND RESTRICTION .

    $end            reduce using rule 1 (equation -> expression BOUND RESTRICTION .)

